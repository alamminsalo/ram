# Rust lang spec file
name: rust

# Dynamic formatting templates for things such as nullable types
format:
  # How struct/class type definition names are formatted
  classname: "{{pascalcase value}}"
  # Formats properties of object type, optional
  object_property: "Box<{{value}}>"
  # Array field format
  array: "Vec<{{type}}>"
  # Formats nullable fields, optional
  nullable: "Option<{{value}}>"
  # Formats reserved language keywords, optional
  r: "r#{{value}}"
  # Formats filenames
  filename: "{{snakecase value}}.rs"

# Additional files to generate, optional
# These files are given the complete application state for free templating usage
files:
  - template: "model.hbs"
    in: model
  - filename: "mod.rs"
    template: "mod_model.hbs"
    in: model

# default file paths
paths:
  model: src/model

# primitive type mapping
types:
  integer:
    alias:
      - int
    format:
      default:
        type: i32
      int32: 
        type: i32
      int64: 
        type: i64

  string:
    format:
      default:
        type: String
      email:
        type: String
      date:
        type: NaiveDate
      date-time:
        type: NaiveDateTime
      binary:
        type: Vec<u8>
      byte:
        type: Vec<u8>

  number:
    format:
      default:
        type: f32
      float:
        type: f32
      double:
        type: f64

  boolean:
    format:
      default:
        type: bool

# list of reserved words
reserved:
  - as
  - break
  - const
  - continue
  - crate
  - else
  - enum
  - extern
  - "false"
  - fn
  - for
  - if
  - impl
  - in
  - let
  - loop
  - match
  - mod
  - move
  - mut
  - pub
  - ref
  - return
  - self
  - Self
  - static
  - struct
  - super
  - trait
  - "true"
  - type
  - unsafe
  - use
  - where
  - while
  - dyn
  - abstract
  - become
  - box
  - do
  - final
  - macro
  - override
  - priv
  - typeof
  - unsized
  - virtual
  - yield
  - async
  - await
  - try
  - union
